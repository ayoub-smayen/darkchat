{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","io","App","useState","username","setUsername","message","setMessage","messages","setMessages","useEffect","on","data","emit","className","map","msg","index","senderClass","key","renderMessage","onSubmit","e","preventDefault","placeholder","onChange","target","value","required","autoFocus","name","style","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wQAIMA,E,MAASC,GAAG,yBA8FHC,MA5Ff,WAAgB,IAAD,EAEmBC,mBAAS,MAF5B,mBAENC,EAFM,KAEIC,EAFJ,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAImBJ,mBAAS,IAJ5B,mBAINK,EAJM,KAIIC,EAJJ,KA8Cb,OAvCAC,qBAAU,WACRV,EAAOW,GAAG,gBAAgB,SAACC,GACzBH,EAAY,GAAD,mBAAKD,GAAL,CAAeI,QAE5BZ,EAAOW,GAAG,gBAAgB,SAACC,GACzBH,EAAYG,QAEb,CAACJ,IAGJE,qBAAU,WACRV,EAAOa,KAAK,kBACX,IA4BD,0BAAMC,UAAU,OAEd,6BAASA,UAAU,oBAChBN,EAASO,KAAI,SAACC,EAAKC,GAAN,OApBE,SAACD,EAAKC,GAC1B,IAAMC,EAAcF,EAAIZ,WAAaA,EAAW,kCAAoC,GACpF,OACE,yBAAKU,UAAS,kCAA6BI,GAAeC,IAAG,aAAQF,IACnE,yBAAKH,UAAU,mCAAmCE,EAAIZ,UACtD,yBAAKU,UAAU,kCAAkCE,EAAIV,UAevBc,CAAcJ,EAAKC,OAGnD,0BACEI,SAhCc,SAACC,GACnBA,EAAEC,iBACF,IAAIX,EAAO,CAAER,WAAUE,WACvBN,EAAOa,KAAK,eAAgBD,GAC5BL,EAAW,KA6BPO,UAAU,iBAEV,2BACEU,YAAY,yBACZC,SAAU,SAACH,GAAD,OAAOf,EAAWe,EAAEI,OAAOC,QACrCA,MAAOrB,EACPsB,UAAU,EACVC,WAAS,MAKVzB,GACD,6BAASU,UAAU,sBACjB,wBAAIA,UAAU,2BACZ,2CAEF,0DACA,0BACEO,SAjCa,SAACC,GACtBA,EAAEC,iBACFlB,EAAYiB,EAAEI,OAAOtB,SAASuB,QAgCtBb,UAAU,iBAEV,2BACEgB,KAAK,WACLN,YAAY,cACZI,UAAU,EACVG,MAAO,CAAEC,MAAO,SAChBH,WAAS,QC5EHI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5C,c","file":"static/js/main.ed82d67e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io('http://localhost:3000');\r\n\r\nfunction App() {\r\n\r\n  const [username, setUsername] = useState(null);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Initialize listeners\r\n  useEffect(() => {\r\n    socket.on('chat-message', (data) => {\r\n      setMessages([...messages, data]);\r\n    });\r\n    socket.on('chat-history', (data) => {\r\n      setMessages(data);\r\n    });\r\n  }, [messages]);\r\n\r\n  // Request a history\r\n  useEffect(() => {\r\n    socket.emit('chat-history');\r\n  }, []);\r\n\r\n  // Send a new message\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    let data = { username, message };\r\n    socket.emit('chat-message', data);\r\n    setMessage(\"\");\r\n  }\r\n\r\n  // Process and render a message\r\n  const renderMessage = (msg, index) => {\r\n    const senderClass = msg.username === username ? 'App_MessagesBox_Message--sender' : '';\r\n    return (\r\n      <div className={`App_MessagesBox_Message ${senderClass}`} key={`msg${index}`}>\r\n        <div className=\"App_MessagesBoxMessage_Username\">{msg.username}</div>\r\n        <div className=\"App_MessagesBoxMessage_Content\">{msg.message}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Set a new username\r\n  const defineUsername = (e) => {\r\n    e.preventDefault();\r\n    setUsername(e.target.username.value);\r\n  }\r\n\r\n  return (\r\n    <main className=\"App\">\r\n\r\n      <section className=\"App__MessagesBox\">\r\n        {messages.map((msg, index) => renderMessage(msg, index))}\r\n      </section>\r\n\r\n      <form\r\n        onSubmit={sendMessage}\r\n        className=\"App__WriteBox\"\r\n      >\r\n        <input\r\n          placeholder=\"Press enter to send...\"\r\n          onChange={(e) => setMessage(e.target.value)}\r\n          value={message}\r\n          required={true}\r\n          autoFocus\r\n        />\r\n      </form>\r\n\r\n      {\r\n        !username &&\r\n        <section className=\"App__PopupUsername\">\r\n          <h1 className=\"App_PopupUsername_Title\">\r\n            <span>TeamChat</span>\r\n          </h1>\r\n          <p>Set a new username for you:</p>\r\n          <form\r\n            onSubmit={defineUsername}\r\n            className=\"App__WriteBox\"\r\n          >\r\n            <input\r\n              name=\"username\"\r\n              placeholder=\"Username...\"\r\n              required={true}\r\n              style={{ width: '310px' }}\r\n              autoFocus\r\n            />\r\n          </form>\r\n        </section>\r\n      }\r\n\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}